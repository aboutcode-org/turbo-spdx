# generated by datamodel-codegen:
#   filename:  spdx-schema.json
#   timestamp: 2023-04-05T08:38:14+00:00

from __future__ import annotations

from enum import Enum
from typing import Any
from typing import Optional

from pydantic import BaseModel
from pydantic import Field


class Reviewed(BaseModel):
    reviewer: Optional[str] = Field(
        default=None,
        description=(
            "The name and, optionally, contact information of the person who performed"
            " the review. Values of this property must conform to the agent and tool"
            " syntax."
        ),
    )
    comment: Optional[str]
    review_date: Optional[str] = Field(
        default=None,
        alias="reviewDate",
        description=(
            "The date and time at which the SpdxDocument was reviewed. This value must"
            " be in UTC and have 'Z' as its timezone indicator."
        ),
    )


class HasExtractedLicensingInfo(BaseModel):
    see_alsos: Optional[list[str]] = Field(default=None, alias="seeAlsos")
    name: Optional[str] = Field(default=None, description="Identify name of this SpdxElement.")
    comment: Optional[str]
    license_id: Optional[str] = Field(
        default=None,
        alias="licenseId",
        description=(
            "A human readable short form license identifier for a license. The license"
            " ID is iether on the standard license oist or the form"
            ' "LicenseRef-"[idString] where [idString] is a unique string containing'
            ' letters, numbers, ".", "-" or "+".'
        ),
    )
    extracted_text: Optional[str] = Field(
        default=None,
        alias="extractedText",
        description="Verbatim license or licensing notice text that was discovered.",
    )


class AnnotationType(str, Enum):
    other = "OTHER"
    review = "REVIEW"


class Annotation(BaseModel):
    annotation_date: Optional[str] = Field(
        default=None,
        alias="annotationDate",
        description=(
            "Identify when the comment was made. This is to be specified according to"
            " the combined date and time in the UTC format, as specified in the ISO"
            " 8601 standard."
        ),
    )
    comment: Optional[str]
    annotator: Optional[str] = Field(
        default=None,
        description=(
            "This field identifies the person, organization or tool that has commented"
            " on a file, package, or the entire document."
        ),
    )
    annotation_type: Optional[AnnotationType] = Field(
        default=None, alias="annotationType", description="Type of the annotation."
    )


class Algorithm(str, Enum):
    sha256 = "SHA256"
    sha1 = "SHA1"
    sha384 = "SHA384"
    md2 = "MD2"
    md4 = "MD4"
    sha512 = "SHA512"
    md6 = "MD6"
    md5 = "MD5"
    sha224 = "SHA224"


class Checksum(BaseModel):
    algorithm: Optional[Algorithm] = Field(
        default=None,
        description=(
            "Identifies the algorithm used to produce the subject Checksum. Currently,"
            " SHA-1 is the only supported algorithm. It is anticipated that other"
            " algorithms will be supported at a later time."
        ),
    )
    checksum_value: Optional[str] = Field(
        default=None,
        alias="checksumValue",
        description=(
            "The checksumValue property provides a lower case hexidecimal encoded"
            " digest value produced using a specific algorithm."
        ),
    )


class ExternalDocumentRef(BaseModel):
    external_document_id: Optional[str] = Field(
        default=None,
        alias="externalDocumentId",
        description=(
            "externalDocumentId is a string containing letters, numbers, ., - and/or +"
            " which uniquely identifies an external document within this document."
        ),
    )
    checksum: Optional[Checksum] = Field(
        default=None,
        description=(
            "A Checksum is value that allows the contents of a file to be"
            " authenticated. Even small changes to the content of the file will change"
            " its checksum. This class allows the results of a variety of checksum and"
            " cryptographic message digest algorithms to be represented."
        ),
    )
    spdx_document: Optional[str] = Field(
        default=None,
        alias="spdxDocument",
        description=("SPDX ID for SpdxDocument.  A propoerty containing an SPDX document."),
    )


class CreationInfo(BaseModel):
    comment: Optional[str]
    created: Optional[str] = Field(
        default=None,
        description=(
            "Identify when the SPDX file was originally created. The date is to be"
            " specified according to combined date and time in UTC format as specified"
            " in ISO 8601 standard. This field is distinct from the fields in section"
            " 8, which involves the addition of information during a subsequent review."
        ),
    )
    creators: Optional[list[str]] = Field(
        default=None,
        description=(
            "Identify who (or what, in the case of a tool) created the SPDX file. If"
            " the SPDX file was created by an individual, indicate the person's name."
            " If the SPDX file was created on behalf of a company or organization,"
            " indicate the entity name. If the SPDX file was created using a software"
            " tool, indicate the name and version for that tool. If multiple"
            " participants or tools were involved, use multiple instances of this"
            " field. Person name or organization name may be designated as “anonymous”"
            " if appropriate."
        ),
        min_items=1,
    )
    license_list_version: Optional[str] = Field(
        default=None,
        alias="licenseListVersion",
        description=(
            "An optional field for creators of the SPDX file to provide the version of"
            " the SPDX License List used when the SPDX file was created."
        ),
    )


class Annotation1(Annotation):
    pass


class PackageVerificationCode(BaseModel):
    package_verification_code_value: Optional[str] = Field(
        default=None,
        alias="packageVerificationCodeValue",
        description="The actual package verification code as a hex encoded value.",
    )
    package_verification_code_excluded_files: Optional[list[str]] = Field(
        default=None,
        alias="packageVerificationCodeExcludedFiles",
        description=(
            "A file that was excluded when calculating the package verification code."
            " This is usually a file containing SPDX data regarding the package. If a"
            " package contains more than one SPDX file all SPDX files must be excluded"
            " from the package verification code. If this is not done it would be"
            " impossible to correctly calculate the verification codes in both files."
        ),
    )


class Checksum1(Checksum):
    pass


class ReferenceCategory(str, Enum):
    other = "OTHER"
    security = "SECURITY"
    package_manager = "PACKAGE_MANAGER"


class ExternalRef(BaseModel):
    comment: Optional[str]
    reference_category: Optional[ReferenceCategory] = Field(
        default=None,
        alias="referenceCategory",
        description="Category for the external reference",
    )
    reference_locator: Optional[str] = Field(
        default=None,
        alias="referenceLocator",
        description=(
            "The unique string with no spaces necessary to access the package-specific"
            " information, metadata, or content within the target location. The format"
            " of the locator is subject to constraints defined by the <type>."
        ),
    )
    reference_type: Optional[str] = Field(
        default=None,
        alias="referenceType",
        description=(
            "Type of the external reference. These are definined in an appendix in the"
            " SPDX specification."
        ),
    )


class Package(BaseModel):
    attribution_texts: Optional[list[str]] = Field(
        default=None,
        alias="attributionTexts",
        description=(
            "This field provides a place for the SPDX data creator to record"
            " acknowledgements that may be required to be communicated in some"
            " contexts. This is not meant to include theactual complete license text"
            " (see licenseConculded and licenseDeclared), and may or may not include"
            " copyright notices (see also copyrightText). The SPDX data creator may use"
            " this field to record other acknowledgements, such as particular clauses"
            " from license texts, which may be necessary or desirable to reproduce."
        ),
    )
    annotations: Optional[list[Annotation1]] = Field(
        default=None, description="Provide additional information about an SpdxElement."
    )
    supplier: Optional[str] = Field(
        default=None,
        description=(
            "The name and, optionally, contact information of the person or"
            " organization who was the immediate supplier of this package to the"
            " recipient. The supplier may be different than originator when the"
            " software has been repackaged. Values of this property must conform to the"
            " agent and tool syntax."
        ),
    )
    homepage: Optional[str]
    package_verification_code: Optional[PackageVerificationCode] = Field(
        default=None,
        alias="packageVerificationCode",
        description=(
            "A manifest based verification code (the algorithm is defined in section"
            " 4.7 of the full specification) of the SPDX Item. This allows consumers of"
            " this data and/or database to determine if an SPDX item they have in hand"
            " is identical to the SPDX item from which the data was produced. This"
            " algorithm works even if the SPDX document is included in the SPDX item."
        ),
    )
    checksums: Optional[list[Checksum1]] = Field(
        default=None,
        description=(
            "The checksum property provides a mechanism that can be used to verify that"
            " the contents of a File or Package have not changed."
        ),
    )
    download_location: Optional[str] = Field(
        default=None,
        alias="downloadLocation",
        description=(
            "The URI at which this package is available for download. Private (i.e.,"
            " not publicly reachable) URIs are acceptable as values of this property."
            " The values http://spdx.org/rdf/terms#none and"
            " http://spdx.org/rdf/terms#noassertion may be used to specify that the"
            " package is not downloadable or that no attempt was made to determine its"
            " download location, respectively."
        ),
    )
    files_analyzed: Optional[bool] = Field(
        default=None,
        alias="filesAnalyzed",
        description=(
            "Indicates whether the file content of this package has been available for"
            " or subjected to analysis when creating the SPDX document. If false"
            " indicates packages that represent metadata or URI references to a"
            " project, product, artifact, distribution or a component. If set to false,"
            " the package must not contain any files."
        ),
    )
    external_refs: Optional[list[ExternalRef]] = Field(
        default=None,
        alias="externalRefs",
        description=(
            "An External Reference allows a Package to reference an external source of"
            " additional information, metadata, enumerations, asset identifiers, or"
            " downloadable content believed to be relevant to the Package."
        ),
    )
    license_comments: Optional[str] = Field(
        default=None,
        alias="licenseComments",
        description=(
            "The licenseComments property allows the preparer of the SPDX document to"
            " describe why the licensing in spdx:licenseConcluded was chosen."
        ),
    )
    name: Optional[str] = Field(default=None, description="Identify name of this SpdxElement.")
    has_files: Optional[list[str]] = Field(
        default=None,
        alias="hasFiles",
        description="Indicates that a particular file belongs to a package.",
    )
    comment: Optional[str]
    summary: Optional[str] = Field(
        default=None, description="Provides a short description of the package."
    )
    copyright_text: Optional[str] = Field(
        default=None,
        alias="copyrightText",
        description=("The text of copyright declarations recited in the Package or File."),
    )
    originator: Optional[str] = Field(
        default=None,
        description=(
            "The name and, optionally, contact information of the person or"
            " organization that originally created the package. Values of this property"
            " must conform to the agent and tool syntax."
        ),
    )
    package_file_name: Optional[str] = Field(
        default=None,
        alias="packageFileName",
        description=("The base name of the package file name. For example, zlib-1.2.5.tar.gz."),
    )
    license_info_from_files: Optional[list[str]] = Field(
        default=None,
        alias="licenseInfoFromFiles",
        description=(
            "The licensing information that was discovered directly within the package."
            " There will be an instance of this property for each distinct value of"
            " alllicenseInfoInFile properties of all files contained in the package."
        ),
    )
    version_info: Optional[str] = Field(
        default=None,
        alias="versionInfo",
        description=(
            "Provides an indication of the version of the package that is described by"
            " this SpdxDocument."
        ),
    )
    source_info: Optional[str] = Field(
        default=None,
        alias="sourceInfo",
        description=(
            "Allows the producer(s) of the SPDX document to describe how the package"
            " was acquired and/or changed from the original source."
        ),
    )
    description: Optional[str] = Field(
        default=None, description="Provides a detailed description of the package."
    )


class FileType(str, Enum):
    other = "OTHER"
    documentation = "DOCUMENTATION"
    image = "IMAGE"
    video = "VIDEO"
    archive = "ARCHIVE"
    spdx = "SPDX"
    application = "APPLICATION"
    source = "SOURCE"
    binary = "BINARY"
    text = "TEXT"
    audio = "AUDIO"


class Annotation2(Annotation):
    pass


class Checksum2(Checksum):
    pass


class File(BaseModel):
    file_types: Optional[list[FileType]] = Field(
        default=None, alias="fileTypes", description="The type of the file."
    )
    attribution_texts: Optional[list[str]] = Field(
        default=None,
        alias="attributionTexts",
        description=(
            "This field provides a place for the SPDX data creator to record"
            " acknowledgements that may be required to be communicated in some"
            " contexts. This is not meant to include theactual complete license text"
            " (see licenseConculded and licenseDeclared), and may or may not include"
            " copyright notices (see also copyrightText). The SPDX data creator may use"
            " this field to record other acknowledgements, such as particular clauses"
            " from license texts, which may be necessary or desirable to reproduce."
        ),
    )
    annotations: Optional[list[Annotation2]] = Field(
        default=None, description="Provide additional information about an SpdxElement."
    )
    checksums: Optional[list[Checksum2]] = Field(
        default=None,
        description=(
            "The checksum property provides a mechanism that can be used to verify that"
            " the contents of a File or Package have not changed."
        ),
        min_items=1,
    )
    notice_text: Optional[str] = Field(
        default=None,
        alias="noticeText",
        description=(
            "This field provides a place for the SPDX file creator to record potential"
            " legal notices found in the file. This may or may not include copyright"
            " statements."
        ),
    )
    artifact_ofs: Optional[list[dict[str, Any]]] = Field(
        default=None,
        alias="artifactOfs",
        description=(
            "Indicates the project in which the SpdxElement originated. Tools must"
            " preserve doap:homepage and doap:name properties and the URI (if one is"
            " known) of doap:Project resources that are values of this property. All"
            " other properties of doap:Projects are not directly supported by SPDX and"
            " may be dropped when translating to or from some SPDX formats."
        ),
    )
    license_comments: Optional[str] = Field(
        default=None,
        alias="licenseComments",
        description=(
            "The licenseComments property allows the preparer of the SPDX document to"
            " describe why the licensing in spdx:licenseConcluded was chosen."
        ),
    )
    file_name: Optional[str] = Field(
        default=None,
        alias="fileName",
        description="The name of the file relative to the root of the package.",
    )
    name: Optional[str] = Field(default=None, description="Identify name of this SpdxElement.")
    comment: Optional[str]
    copyright_text: Optional[str] = Field(
        default=None,
        alias="copyrightText",
        description=("The text of copyright declarations recited in the Package or File."),
    )
    file_contributors: Optional[list[str]] = Field(
        default=None,
        alias="fileContributors",
        description=(
            "This field provides a place for the SPDX file creator to record file"
            " contributors. Contributors could include names of copyright holders"
            " and/or authors who may not be copyright holders yet contributed to the"
            " file content."
        ),
    )
    license_info_in_files: Optional[list[str]] = Field(
        default=None,
        alias="licenseInfoInFiles",
        description=(
            "Licensing information that was discovered directly in the subject file."
            " This is also considered a declared license for the file."
        ),
        min_items=1,
    )
    license_info_from_files: Optional[list[str]] = Field(
        default=None,
        alias="licenseInfoFromFiles",
        description=(
            "The licensing information that was discovered directly within the package."
            " There will be an instance of this property for each distinct value of"
            " alllicenseInfoInFile properties of all files contained in the package."
        ),
    )
    file_dependencies: Optional[list[str]] = Field(default=None, alias="fileDependencies")


class StartPointer(BaseModel):
    reference: Optional[str] = Field(default=None, description="SPDX ID for File")


class EndPointer(StartPointer):
    pass


class Range(BaseModel):
    start_pointer: Optional[StartPointer] = Field(default=None, alias="startPointer")
    end_pointer: Optional[EndPointer] = Field(default=None, alias="endPointer")


class Annotation3(Annotation):
    pass


class Snippet(BaseModel):
    ranges: Optional[list[Range]] = Field(
        default=None,
        description=(
            "This field defines the byte range in the original host file (in X.2) that"
            " the snippet information applies to"
        ),
        min_items=1,
    )
    license_comments: Optional[str] = Field(
        default=None,
        alias="licenseComments",
        description=(
            "The licenseComments property allows the preparer of the SPDX document to"
            " describe why the licensing in spdx:licenseConcluded was chosen."
        ),
    )
    attribution_texts: Optional[list[str]] = Field(
        default=None,
        alias="attributionTexts",
        description=(
            "This field provides a place for the SPDX data creator to record"
            " acknowledgements that may be required to be communicated in some"
            " contexts. This is not meant to include theactual complete license text"
            " (see licenseConculded and licenseDeclared), and may or may not include"
            " copyright notices (see also copyrightText). The SPDX data creator may use"
            " this field to record other acknowledgements, such as particular clauses"
            " from license texts, which may be necessary or desirable to reproduce."
        ),
    )
    name: Optional[str] = Field(default=None, description="Identify name of this SpdxElement.")
    snippet_from_file: Optional[str] = Field(
        default=None,
        alias="snippetFromFile",
        description=(
            "SPDX ID for File.  File containing the SPDX element (e.g. the file"
            " contaning a snippet)."
        ),
    )
    comment: Optional[str]
    copyright_text: Optional[str] = Field(
        default=None,
        alias="copyrightText",
        description=("The text of copyright declarations recited in the Package or File."),
    )
    license_info_in_snippets: Optional[list[str]] = Field(
        default=None,
        alias="licenseInfoInSnippets",
        description=(
            "Licensing information that was discovered directly in the subject snippet."
            " This is also considered a declared license for the snippet."
        ),
    )
    annotations: Optional[list[Annotation3]] = Field(
        default=None, description="Provide additional information about an SpdxElement."
    )
    license_info_from_files: Optional[list[str]] = Field(
        default=None,
        alias="licenseInfoFromFiles",
        description=(
            "The licensing information that was discovered directly within the package."
            " There will be an instance of this property for each distinct value of"
            " alllicenseInfoInFile properties of all files contained in the package."
        ),
    )


class RelationshipType(str, Enum):
    variant_of = "VARIANT_OF"
    copy_of = "COPY_OF"
    patch_for = "PATCH_FOR"
    test_dependency_of = "TEST_DEPENDENCY_OF"
    contained_by = "CONTAINED_BY"
    data_file_of = "DATA_FILE_OF"
    optional_component_of = "OPTIONAL_COMPONENT_OF"
    ancestor_of = "ANCESTOR_OF"
    generates = "GENERATES"
    contains = "CONTAINS"
    optional_dependency_of = "OPTIONAL_DEPENDENCY_OF"
    file_added = "FILE_ADDED"
    dev_dependency_of = "DEV_DEPENDENCY_OF"
    dependency_of = "DEPENDENCY_OF"
    build_dependency_of = "BUILD_DEPENDENCY_OF"
    describes = "DESCRIBES"
    prerequisite_for = "PREREQUISITE_FOR"
    has_prerequisite = "HAS_PREREQUISITE"
    provided_dependency_of = "PROVIDED_DEPENDENCY_OF"
    dynamic_link = "DYNAMIC_LINK"
    described_by = "DESCRIBED_BY"
    metafile_of = "METAFILE_OF"
    dependency_manifest_of = "DEPENDENCY_MANIFEST_OF"
    patch_applied = "PATCH_APPLIED"
    runtime_dependency_of = "RUNTIME_DEPENDENCY_OF"
    test_of = "TEST_OF"
    test_tool_of = "TEST_TOOL_OF"
    depends_on = "DEPENDS_ON"
    file_modified = "FILE_MODIFIED"
    distribution_artifact = "DISTRIBUTION_ARTIFACT"
    documentation_of = "DOCUMENTATION_OF"
    generated_from = "GENERATED_FROM"
    static_link = "STATIC_LINK"
    other = "OTHER"
    build_tool_of = "BUILD_TOOL_OF"
    test_case_of = "TEST_CASE_OF"
    package_of = "PACKAGE_OF"
    descendant_of = "DESCENDANT_OF"
    file_deleted = "FILE_DELETED"
    expanded_from_archive = "EXPANDED_FROM_ARCHIVE"
    dev_tool_of = "DEV_TOOL_OF"
    example_of = "EXAMPLE_OF"


class Relationship(BaseModel):
    comment: Optional[str]
    relationship_type: Optional[RelationshipType] = Field(
        default=None,
        alias="relationshipType",
        description="Describes the type of relationship between two SPDX elements.",
    )
    related_spdx_element: Optional[str] = Field(
        default=None,
        alias="relatedSpdxElement",
        description="SPDX ID for SpdxElement.  A related SpdxElement.",
    )


class Document(BaseModel):
    revieweds: Optional[list[Reviewed]] = Field(default=None, description="Reviewed")
    has_extracted_licensing_infos: Optional[list[HasExtractedLicensingInfo]] = Field(
        default=None,
        alias="hasExtractedLicensingInfos",
        description=(
            "Indicates that a particular ExtractedLicensingInfo was defined in the"
            " subject SpdxDocument."
        ),
    )
    name: Optional[str] = Field(default=None, description="Identify name of this SpdxElement.")
    comment: Optional[str]
    spdx_version: Optional[str] = Field(
        default=None,
        alias="spdxVersion",
        description=(
            "Provide a reference number that can be used to understand how to parse and"
            " interpret the rest of the file. It will enable both future changes to the"
            " specification and to support backward compatibility. The version number"
            " consists of a major and minor version indicator. The major field will be"
            " incremented when incompatible changes between versions are made (one or"
            " more sections are created, modified or deleted). The minor field will be"
            " incremented when backwards compatible changes are made."
        ),
    )
    annotations: Optional[list[Annotation]] = Field(
        default=None, description="Provide additional information about an SpdxElement."
    )
    describes_packages: Optional[list[str]] = Field(
        default=None,
        alias="describesPackages",
        description=(
            "The describesPackage property relates an SpdxDocument to the package which"
            " it describes."
        ),
    )
    data_license: Optional[str] = Field(
        default=None,
        alias="dataLicense",
        description=(
            "License expression for dataLicense.  Compliance with the SPDX"
            " specification includes populating the SPDX fields therein with data"
            ' related to such fields ("SPDX-Metadata"). The SPDX specification contains'
            " numerous fields where an SPDX document creator may provide relevant"
            " explanatory text in SPDX-Metadata. Without opining on the lawfulness of"
            ' "database rights" (in jurisdictions where applicable), such explanatory'
            " text is copyrightable subject matter in most Berne Convention countries."
            " By using the SPDX specification, or any portion hereof, you hereby agree"
            " that any copyright rights (as determined by your jurisdiction) in any"
            " SPDX-Metadata, including without limitation explanatory text, shall be"
            " subject to the terms of the Creative Commons CC0 1.0 Universal license."
            " For SPDX-Metadata not containing any copyright rights, you hereby agree"
            ' and acknowledge that the SPDX-Metadata is provided to you "as-is" and'
            " without any representations or warranties of any kind concerning the"
            " SPDX-Metadata, express, implied, statutory or otherwise, including"
            " without limitation warranties of title, merchantability, fitness for a"
            " particular purpose, non-infringement, or the absence of latent or other"
            " defects, accuracy, or the presence or absence of errors, whether or not"
            " discoverable, all to the greatest extent permissible under applicable"
            " law."
        ),
    )
    external_document_refs: Optional[list[ExternalDocumentRef]] = Field(
        default=None,
        alias="externalDocumentRefs",
        description=("Identify any external SPDX documents referenced within this SPDX document."),
    )
    creation_info: Optional[CreationInfo] = Field(
        default=None,
        alias="creationInfo",
        description=(
            "One instance is required for each SPDX file produced. It provides the"
            " necessary information for forward and backward compatibility for"
            " processing tools."
        ),
    )
    packages: Optional[list[Package]] = Field(
        default=None, description="Packages referenced in the SPDX document"
    )
    files: Optional[list[File]] = Field(
        default=None, description="Files referenced in the SPDX document"
    )
    snippets: Optional[list[Snippet]] = Field(
        default=None, description="Snippets referenced in the SPDX document"
    )
    relationships: Optional[list[Relationship]] = Field(
        default=None, description="Relationships referenced in the SPDX document"
    )


class SPDXBom(BaseModel):
    document: Optional[Document] = Field(default=None, alias="Document")
